description: |
    Run codeception tests for end-to-end testing on a WordPress site.
    Codeception supports unit, wpunit, functional, and acceptance testing.

parameters:
    package_type:
        description: Is this a WordPress plugin or theme
        type: enum
        enum: ["plugin", "theme", "project"]
        default: project
    package_name:
        description: Name of the plugin or theme (directory name)
        type: string
        default: project

docker:
    - image: cimg/php:7.4-node
      environment:
          DOCKERIZE_VERSION: v0.6.1
          WORDPRESS_DB_HOST: mysql
          WORDPRESS_DB_USER: wordpress
          WORDPRESS_DB_PASSWORD: wordpress
          WORDPRESS_DB_NAME: wordpress
          WORDPRESS_DB_CHARSET: utf8
          WORDPRESS_ROOT_FOLDER: /home/circleci/project
          WORDPRESS_DOMAIN: localhost
          WORDPRESS_URL: http://localhost
          WORDPRESS_TABLE_PREFIX: wp_
          WORDPRESS_ADMIN_EMAIL: admin@wp.local
          WORDPRESS_ADMIN_USERNAME: admin
          WORDPRESS_ADMIN_PASSWORD: password

    - image: circleci/mysql:5
      name: mysql
      environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wordpress
          MYSQL_PASSWORD: wordpress

    - image: selenium/standalone-chrome
      name: webdriver

working_directory: /home/circleci/project

steps:
    - run:
          name: Install apt needs
          command: |
            sudo apt-get update && \
            sudo apt-get -y install \
                default-mysql-client \
                libjpeg-dev \
                libpng-dev \
                libzip-dev

    - restore_cache:
          keys:
              - installwpbrowser-{{ .Environment.CACHE_VERSION }}

    - run:
          name: Install wp-browser globally
          command: |
            composer global require --optimize-autoloader \
                lucatume/wp-browser \
                codeception/module-asserts \
                codeception/module-cli \
                codeception/module-db \
                codeception/module-filesystem \
                codeception/module-phpbrowser \
                codeception/module-rest \
                codeception/module-webdriver \
                codeception/util-universalframework \
                league/factory-muffin \
                league/factory-muffin-faker \
                wp-cli/wp-cli-bundle

    - save_cache:
          key: installwpbrowser-{{ .Environment.CACHE_VERSION }}
          paths:
              - ~/.composer
              - ~/.config/composer

    - run:
          name: Add global composer bin-dir to PATH
          command: |
              COMPOSER_GLOBAL_BIN=$(composer global config bin-dir --absolute --quiet)
              if ! echo "$PATH" | grep "$COMPOSER_GLOBAL_BIN"; then
                  echo "export PATH=$COMPOSER_GLOBAL_BIN:$PATH" >> "$BASH_ENV"
              fi

    - run:
          name: Set up Apache
          command: |
              echo "ServerName localhost
              <Directory ${CIRCLE_WORKING_DIRECTORY}>
                    Options Indexes FollowSymLinks
                    AllowOverride All
                    Require all granted
              </Directory>" | sudo tee -a /etc/apache2/conf-available/localhost.conf > /dev/null

              echo "<VirtualHost *:80>
                    DocumentRoot ${CIRCLE_WORKING_DIRECTORY}
              </VirtualHost>" | sudo tee -a /etc/apache2/sites-available/localhost.conf > /dev/null

              sudo a2enmod rewrite
              sudo a2enconf localhost
              sudo a2ensite localhost
              sudo a2dissite 000-default
              sudo service apache2 restart

    - run: dockerize -wait "tcp://$WORDPRESS_DB_HOST:3306" -timeout 1m

    - run:
          name: Set up env variables for codeception testing
          command: echo "export WORDPRESS_DOMAIN=$( hostname -i ); export WORDPRESS_URL=http://$( hostname -i )" >> "$BASH_ENV"

    # Projects get installed in the CircleCI working directory
    - when:
          condition:
              equal: [ project, << parameters.package_type >> ]
          steps:
              - attach_workspace:
                    at: /home/circleci/project
              - run:
                    name: Set up tests directory
                    command: echo "export CODECEPT_DIRECTORY=$CIRCLE_WORKING_DIRECTORY" >> "$BASH_ENV"

    # Plugins and themes get installed in /home/circleci/project/wp-content/
    - when:
          condition:
              or:
                  - equal: [ theme, << parameters.package_type >> ]
                  - equal: [ plugin, << parameters.package_type >> ]
          steps:
              - attach_workspace:
                    at: /home/circleci/project/wp-content/<< parameters.package_type >>s/<< parameters.package_name >>
              - run:
                    name: Set up tests directory
                    command: echo "export CODECEPT_DIRECTORY=$CIRCLE_WORKING_DIRECTORY/wp-content/<< parameters.package_type >>s/<< parameters.package_name >>" >> "$BASH_ENV"

    # Download and install WordPress
    - run:
          name: Download WordPress
          command: wp core download

    - run:
          name: Create htaccess file
          command: |
              echo '# BEGIN WordPress
              RewriteEngine On
              RewriteBase /
              RewriteRule ^index\.php$ - [L]
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteRule . /index.php [L]
              # END WordPress' | tee -a .htaccess > /dev/null

    - run:
          name: Config WordPress
          command: |
              wp config create \
                  --dbname="$WORDPRESS_DB_NAME" \
                  --dbuser="$WORDPRESS_DB_USER" \
                  --dbpass="$WORDPRESS_DB_PASSWORD" \
                  --dbhost="$WORDPRESS_DB_HOST" \
                  --dbprefix="$WORDPRESS_TABLE_PREFIX" \
                  --dbcharset="$WORDPRESS_DB_CHARSET" \
                  --skip-check

    - run:
          name: Install WordPress
          command: |
              wp core install \
                  --url="$WORDPRESS_URL" \
                  --title="Test" \
                  --admin_user="$WORDPRESS_ADMIN_USERNAME" \
                  --admin_password="$WORDPRESS_ADMIN_PASSWORD" \
                  --admin_email="$WORDPRESS_ADMIN_EMAIL"

    # Get ourselves a handy database dump for running tests
    - run:
          name: Export a database dump
          command: |
              mkdir -p wp-content/mu-plugins
              mkdir -p wp-content/plugins
              mkdir -p wp-content/themes
              chmod a+rx wp-content wp-content/plugins wp-content/themes wp-content/uploads
              wp db export wp-content/mysql.sql \
                  --skip-plugins \
                  --skip-themes \
                  --allow-root

    # Make sure .env exists in case the config depends on it
    - run: touch "$CODECEPT_DIRECTORY/.env"

    - run:
          name: Download codeception dist files
          command: wget -nc -P "$CODECEPT_DIRECTORY" https://raw.githubusercontent.com/ryanshoover/orb-wpengine-deploy/master/lib/codeception.dist.yml

    - run:
          name: Maybe move dxt-tester files
          command: |
              if [ -d "$CODECEPT_DIRECTORY/vendor/wpengine/dxt-tester/lib/codecept" ]; then
                  mv "$CODECEPT_DIRECTORY/vendor/wpengine/dxt-tester/lib/codecept" "$CODECEPT_DIRECTORY"
              fi

    # Run all our tests, one suite at a time
    - run:
          name: Run Codeception acceptance tests
          command: cd "$CODECEPT_DIRECTORY" && codecept run acceptance --xml="$CIRCLE_WORKING_DIRECTORY/test-results/acceptance/results.xml" --no-interaction
    - run:
          name: Run Codeception functional tests
          command: cd "$CODECEPT_DIRECTORY" && codecept run functional --xml="$CIRCLE_WORKING_DIRECTORY/test-results/functional/results.xml" --no-interaction
    - run:
          name: Run Codeception unit tests
          command: cd "$CODECEPT_DIRECTORY" && codecept run unit --xml="$CIRCLE_WORKING_DIRECTORY/test-results/unit/results.xml" --no-interaction
    - run:
          name: Run Codeception wpunit tests
          command: cd "$CODECEPT_DIRECTORY" && codecept run wpunit --xml="$CIRCLE_WORKING_DIRECTORY/test-results/wpunit/results.xml" --no-interaction

    # Save the results
    - store_test_results:
          path: test-results

    - store_artifacts:
          path: test-results
